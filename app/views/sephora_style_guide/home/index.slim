script src='https://unpkg.com/vue'

main.container-fluid#app role='main'
  .topbar
    h1.h1.text-avalon-bold.title SEPHORA STYLE GUIDE
    span.svg-icon.close2.topbar-icon(@click='closeSidebar()' v-if='showSidebar')
    span.svg-icon.menu.topbar-icon(@click='openSidebar()' v-else)

  .sidebar
    h1.h1.text-avalon-bold.title SEPHORA STYLE GUIDE

    .header.text-avalon-bold ELEMENTS
    ul.text-avalon
      template(v-for='element in elements')
        li @click='closeSidebar()'
          a :href='element.id' v-text='element.name'

    .header.text-avalon-bold COMPONENTS
    ul.text-avalon
      template(v-for='component in components')
        li @click='closeSidebar()'
          a :href='component.id' v-text='component.name'

    .header.text-avalon-bold PARTIALS
    ul.text-avalon
      template(v-for='partial in partials')
        li @click='closeSidebar()'
          a :href='partial.id' v-text='partial.name'

  .content
    = render 'sephora_style_guide/home/colors'
    = render 'sephora_style_guide/home/typography'
    = render 'sephora_style_guide/home/icons'
    = render 'sephora_style_guide/home/forms'
    = render 'sephora_style_guide/home/grid'
    = render 'sephora_style_guide/home/alerts'
    = render 'sephora_style_guide/home/accordion'
    = render 'sephora_style_guide/home/buttons'
    = render 'sephora_style_guide/home/breadcrumbs'
    = render 'sephora_style_guide/home/loaders'
    = render 'sephora_style_guide/home/pagination'
    = render 'sephora_style_guide/home/modals'
    = render 'sephora_style_guide/home/tables'
    = render 'sephora_style_guide/home/tabs'
    = render 'sephora_style_guide/home/slider'
    = render 'sephora_style_guide/home/product_card'
    = render 'sephora_style_guide/home/video'

javascript:
  var elements = [
    { name: 'Colour', id: '#colors' },
    { name: 'Fonts', id: '#fonts'},
    { name: 'Text Styles', id: '#text'},
    { name: 'Icons', id: '#icons' },
    { name: 'Input Fields', id: '#forms' },
    { name: 'Grid System', id: '#grid' }
  ]
  var components = [
    { name: 'Alerts', id: '#alerts' },
    { name: 'Accordion', id: '#accordion' },
    { name: 'Buttons', id: '#buttons' },
    { name: 'Breadcrumbs', id: '#breadcrumbs' },
    { name: 'Loaders', id: '#loaders' },
    { name: 'Pagination Buttons', id: '#pagination' },
    { name: 'Modals', id: '#modals'},
    { name: 'Tables', id: '#tables' },
    { name: 'Tabs', id: '#tabs' }
  ]
  var partials = [
    { name: 'Slider', id: '#slider' },
    { name: 'Product Card', id: '#product-card' },
    { name: 'Video', id: '#video' }
  ]
  var app = new Vue({
    el: '#app',
    data: {
      elements: elements,
      components: components,
      partials: partials,
      text: 'The quick brown fox jumps over the lazy dog.',
      buttonIsDisabled: false,
      buttonText: this.textInitial,
      buttonTextInitial: '',
      buttonTextPending: 'Adding...',
      showProductOneActions: false,
      showProductTwoActions: false,
      showProductThreeActions: false,
      waitlistText: 'Waitlist Me',
      productIsWaitListed: false,
      productOneIsWishListed: false,
      productTwoIsWishListed: false,
      productThreeIsWishListed: false,
      showDiscountPrice: false,
      showNormalPrice: false,
      showPriceRange: true,
      hoverTimeout: null,
      alertTimeout: null,
      isCheckboxOneChecked: false,
      isCheckboxTwoChecked: false,
      isRadioOneSelected: false,
      isRadioTwoSelected: false,
      isOutOfStock: false,
      showAlertSuccess: false,
      showAlertWarning: false,
      showAlertError: false,
      showSidebar: false,
    },
    methods: {
      openSidebar() {
        $('body').addClass('disable-scroll')
        $('.sidebar').addClass('show')
        this.showSidebar = true;
      },

      closeSidebar() {
        $('body').removeClass('disable-scroll')
        $('.sidebar').removeClass('show')
        this.showSidebar = false;
      },

      changeInitialText() {
        this.buttonText = this.buttonTextInitial;
      },

      clickButton() {
        var self = this;
        this.buttonText = this.buttonTextPending;
        this.isDisabled = 'disabled';
        setTimeout(function(){
          self.buttonText = self.buttonTextInitial;
          self.buttonIsDisabled = false;
        }, 2000);
      },

      mouseoverProductCard(e) {
        const target = e.target.closest('.product-card').getAttribute('name');
        if (target === 'product1') {
          this.showProductOneActions = true;
        } else if (target === 'product2') {
          this.showProductTwoActions = true;
        } else if (target === 'product3') {
          this.showProductThreeActions = true;
        }
      },

      mouseleaveProductCard() {
        this.showProductOneActions = false;
        this.showProductTwoActions = false;
        this.showProductThreeActions = false;
      },

      waitlistProduct() {
        this.waitlistText = 'Waitlisted';
        this.productIsWaitListed = true;
      },

      selectVariant(e) {
        if ($(e.target).hasClass('product-variant')) {

          if (e.target.closest('.product-card').getAttribute('name') === 'product1') {
            this.showPriceRange = false;

            if (e.target.parentNode.getAttribute('name') === 'variant2') {
              this.isOutOfStock = true;
            } else {
              this.isOutOfStock = false;
            }
          }

          if (e.target.closest('.product-card').getAttribute('name') === 'product3') {
            this.showPriceRange = false;

            if (e.target.parentNode.getAttribute('name') === 'variant14') {
              this.showDiscountPrice = true;
              this.showNormalPrice = false;
            } else if (e.target.parentNode.getAttribute('name') === 'variant15') {
              this.showDiscountPrice = false;
              this.showNormalPrice = true;
            }
          }

          const variants = $(e.target).closest('.product-card-variants').children()

          $.each(variants, function(i, variant) {
            $(variant).children().removeClass('active')
          })

          $(e.target).addClass('active')
        }
      },

      hoverVariant(e) {
        if(this.hoverTimeout) {
          clearTimeout(this.hoverTimeout)
        }

        if ($(e.target).hasClass('product-variant')) {
          if (e.target.parentNode.getAttribute('name') === 'variant14') {
            this.showDiscountPrice = true;
            this.showNormalPrice = false;
          } else if (e.target.parentNode.getAttribute('name') === 'variant15') {
            this.showDiscountPrice = false;
            this.showNormalPrice = true;
          }
        }
      },

      leaveVariant(e) {
        const self = this;
        this.hoverTimeout = setTimeout(function() {
          const variant = $(e.target).closest('.product-card-variants').find('.active').parent().attr('name')

          if (variant === 'variant14' && self.showPriceRange === false) {
            self.showDiscountPrice = true;
            self.showNormalPrice = false;
          } else if (variant === 'variant15' && self.showPriceRange === false) {
            self.showDiscountPrice = false;
            self.showNormalPrice = true;
          } else {
            self.showDiscountPrice = false;
            self.showNormalPrice = false;
          }
        }, 10)
      },

      setWishList(e) {
        const targetClass = e.target.className;
        if (targetClass === 'product-card-heart' || targetClass === 'product-card-heart-filled') {
          const target = e.target.closest(".product-card").getAttribute('name');
          if (target === 'product1') {
            this.productOneIsWishListed = !this.productOneIsWishListed;
          } else if (target === 'product2') {
            this.productTwoIsWishListed = !this.productTwoIsWishListed;
          } else if (target === 'product3') {
            this.productThreeIsWishListed = !this.productThreeIsWishListed;
          }
        }
      },

      alertError() {
        this.showAlertError = true;
        this.showAlertSuccess = false;
        this.showAlertWarning = false;

        clearTimeout(this.alertTimeout);
        const self = this;
        this.alertTimeout = setTimeout(function () {
          self.showAlertError = false;
        }, 3500);
      },

      alertWarning() {
        this.showAlertWarning = true;
        this.showAlertSuccess = false;
        this.showAlertError = false;

        clearTimeout(this.alertTimeout);
        const self = this;
        this.alertTimeout = setTimeout(function () {
          self.showAlertWarning = false;
        }, 3500);
      },

      alertSuccess() {
        this.showAlertSuccess = true;
        this.showAlertWarning = false;
        this.showAlertError = false;

        clearTimeout(this.alertTimeout);
        const self = this;
        this.alertTimeout = setTimeout(function () {
          self.showAlertSuccess = false;
        }, 3500);
      },

      closeAlerts() {
        this.showAlertSuccess = false;
        this.showAlertWarning = false;
        this.showAlertError = false;
      },

      toggleCheckboxOne() {
        this.isCheckboxOneChecked = !this.isCheckboxOneChecked;
      },

      toggleCheckboxTwo() {
        this.isCheckboxTwoChecked = !this.isCheckboxTwoChecked;
      },

      toggleRadioOne() {
        this.isRadioOneSelected = !this.isRadioOneSelected;
        this.isRadioTwoSelected = false;
      },

      toggleRadioTwo() {
        this.isRadioTwoSelected = !this.isRadioTwoSelected;
        this.isRadioOneSelected = false;
      }
    },

    mounted() {
      let tag = document.createElement('script');
      tag.src = '//www.youtube.com/player_api';
      const firstScriptTag = document.body.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    }
  });
